"use strict";(self.webpackChunkclinext=self.webpackChunkclinext||[]).push([[4836],{95788:(e,n,t)=>{t.d(n,{Iu:()=>p,yg:()=>g});var r=t(11504);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},13612:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(45072),o=(t(11504),t(95788));const a={sidebar_position:1},i="Extension",s={unversionedId:"reference/extension",id:"version-1.0/reference/extension",title:"Extension",description:"- An extension needs to be registered through its index.js > register method",source:"@site/versioned_docs/version-1.0/reference/extension.mdx",sourceDirName:"reference",slug:"/reference/extension",permalink:"/documentation/docs/reference/extension",draft:!1,editUrl:"https://github.com/clinext-core/generator-clinext/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0/reference/extension.mdx",tags:[],version:"1.0",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"CliNext Config",permalink:"/documentation/docs/reference/config"},next:{title:"Question",permalink:"/documentation/docs/reference/question"}},l={},c=[{value:"Create an extension",id:"create-an-extension",level:2},{value:"Standalone extension project",id:"standalone-extension-project",level:3},{value:"Inline extension",id:"inline-extension",level:3},{value:"Anatomy of an extension",id:"anatomy-of-an-extension",level:3},{value:"Use an extension",id:"use-an-extension",level:2},{value:"Declare / import",id:"declare--import",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.c)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"extension"},"Extension"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"An extension needs to be registered through its index.js > register method"),(0,o.yg)("li",{parentName:"ul"},"An extension can declare questions, validators and transformers the same way a CliNext app does")),(0,o.yg)("h2",{id:"create-an-extension"},"Create an extension"),(0,o.yg)("h3",{id:"standalone-extension-project"},"Standalone extension project"),(0,o.yg)("p",null,"This command creates a standalone npm module that can be imported in a CliNext app:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"clinext extension new -h\n")),(0,o.yg)("p",null,"The module will have this structure:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 src\n\u251c\u2500\u2500 \u251c\u2500\u2500 ... (extension content)\n\u2514\u2500\u2500 package.json\n")),(0,o.yg)("h3",{id:"inline-extension"},"Inline extension"),(0,o.yg)("p",null,"This command creates an extension content in the ",(0,o.yg)("em",{parentName:"p"},"extensions")," folder of a CliNext app:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"clinext extension add -h\n")),(0,o.yg)("h3",{id:"anatomy-of-an-extension"},"Anatomy of an extension"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 questions\n\u251c\u2500\u2500 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 validators\n\u251c\u2500\u2500 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 transformers\n\u2514\u2500\u2500 \u251c\u2500\u2500 ...\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"index.js")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'export default ({\n  id: "<%= uniqueId %>",\n  description: "<%= description %>",\n  register: async ({ toolbox }) => {\n    // At this point the CliNext object is available and can be manipulated (cautiously)\n  }\n})\n')),(0,o.yg)("h2",{id:"use-an-extension"},"Use an extension"),(0,o.yg)("h3",{id:"declare--import"},"Declare / import"),(0,o.yg)("p",null,"For inline extensions no need to explicitely import.\nFor standalone modules, "),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Declare the module in package.json"),(0,o.yg)("li",{parentName:"ol"},"Declare the module in clinext.config.js")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'export default ({\n  __clinextApiVersion: "1.0.0",\n  name: "<%= name %>",\n  usage: "<%= usage %>",  \n  extensions: [\n    "<%= moduleId %>"\n  ]\n})\n')),(0,o.yg)("p",null,"Then check the extension documentation."))}d.isMDXComponent=!0}}]);